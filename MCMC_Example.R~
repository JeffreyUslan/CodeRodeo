#Stupid MCMC example

#Markov Chain Monte Carlo provides a means of sampling from a distribution that is 
#known only up to a constant of proportionality.  It can also be used for 
#optimization, in which we seek the point with the highest function value.  To that end, simply 
#create a bunch of samples (run the chain), and then look for the x-value at the maximum.

#Suppose our function to maximize is exp(-.5*x^2).  Note that this 
#proportional to a standard normal distribution, but is not itself standard normal.
#Also note that the solution in this example is trivial, the max is at x=0.
#But it's a good example.

f<-function(x) exp(-.5*x^2)
x<-seq(from=-3,to=3,length.out=100)
plot(x,f(x),type="l",lwd=2.5,main="Density")

#Define a function to run a single Markov Chain, as a function of the number of reps.
#At each step, propose a random change.  Accept the change if it moves uphill, and 
#accept with some probability if the change moves downhill.  Remove the first so many
#iterations as "burn-in".  The chain only creates valid samples from the distribution 
#once it reaches a steady-state.

one.chain<-function(nreps=100000,seed=7) {
  set.seed(seed)
  x<-vector(mode="numeric",length=nreps)
  burn=nreps/10

  #Random starting point
  x[1]<-rnorm(1)

  for(i in 2:nreps) {
    x.tmp<-x[i-1]+rnorm(1,sd=.2)
    phi<-f(x.tmp)/f(x[i-1])
    if(phi>1) {
      x[i]<-x.tmp
    } else {
      x[i]<-ifelse(rbinom(1,1,prob=phi),x.tmp,x[i-1])
    }
  }
  return(x[-(1:burn)])
}

#Run 1000 reps.  Looks bad
x<-one.chain(1000)
hist(x,freq=FALSE,nc=50)
lines(sort(x),dnorm(sort(x)))

#Run 10,000 reps.  Looks a little better
x<-one.chain(10000)
hist(x,freq=FALSE,nc=50)
lines(sort(x),dnorm(sort(x)))

#Run 100,000 reps.  Looks good.
x<-one.chain(100000)
hist(x,freq=FALSE,nc=50)
lines(sort(x),dnorm(sort(x)))

#Run 1,000,000 reps.  Looks great.
x<-one.chain(1000000)
hist(x,freq=FALSE,nc=50)
lines(sort(x),dnorm(sort(x)))

#Find the x at which the function is maximized.  Success!
x[which(dnorm(x)==max(dnorm(x)))]


